添加类：
package com.at.avro;

import com.at.avro.config.AvroConfig;
import com.at.avro.config.FormatterConfig;
import com.at.avro.mappers.RemovePlural;
import com.at.avro.mappers.ToCamelCase;
import com.at.avro.types.Date;

import java.util.List;

public class SchemaGeneratorTools {

    public static void getSomeTables() throws ClassNotFoundException {
        // Initialize db crawler that will create avro model objects
        DbSchemaExtractor schemaExtractor = new DbSchemaExtractor("jdbc:mysql://10.210.110.92:3306", "root", "YOUxin@com");

        AvroConfig avroConfig = new AvroConfig("some.namespace");
// Get avro models for a few tables
        List<AvroSchema> schemas = schemaExtractor.getForTables(avroConfig, "marketing_center", "crm_store");

        for (AvroSchema schema : schemas) {
            // Pass avro model to SchemaGenerator, get schema and print it out.
            String schemaJson = SchemaGenerator.generate(schema);
            System.out.println(schemaJson);
        }
    }

    private static void getAllTables() throws ClassNotFoundException {
        DbSchemaExtractor schemaExtractor = new DbSchemaExtractor("jdbc:mysql://10.210.110.162:3306", "root", "Youxin123");

// Some of available configuration options
        AvroConfig avroConfig = new AvroConfig("some.namespace")
                .setRepresentEnumsAsStrings(true) // use 'string' avro type instead of 'enum' for enums
                .setAllFieldsDefaultNull(true)    // adds default: 'null' to fields definition
                .setNullableTrueByDefault(true)   // makes all fields nullable
                .setSchemaNameMapper(new ToCamelCase().andThen(new RemovePlural())) // specify table name transformation to be used for schema name
                .setUnknownTypeResolver(type -> "string") // specify what to do with custom and unsupported db types
                .setDateTypeClass(Date.class) // add hint for avro compiler about which class to use for dates
                .setAvroSchemaPostProcessor((schema, table) -> {
                    // adding some custom properties to avro schema
                    schema.addCustomProperty("db-schema-name", "mydb");
                    schema.addCustomProperty("db-table-name", table.getName());
                });

// Get avro models for a few tables
        List<AvroSchema> schemas = schemaExtractor.getAll(avroConfig);

// You can specify some formatting options by creating a FormatterConfig and passing it to SchemaGenerator.
        FormatterConfig formatterConfig = FormatterConfig.builder()
                .setPrettyPrintSchema(true)
                .setPrettyPrintFields(false)
                .setIndent("    ")
                .build();

        for (AvroSchema schema : schemas) {
            String schemaJson = SchemaGenerator.generate(schema, formatterConfig);
            System.out.println(schemaJson);
        }
    }
    public static void main(String[] args) {
        try {
            getSomeTables();
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        }
    }
}
 在pom 文件中添加jdbc
 
       <!-- https://mvnrepository.com/artifact/mysql/mysql-connector-java -->
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>5.1.5</version>
        </dependency>

 
 在获取mysql connect 时，需要添加 Class.forName("com.mysql.jdbc.Driver").newInstance();
     private List<AvroSchema> get(AvroConfig avroConfig, String dbSchemaName, String... tableNames) throws ClassNotFoundException {
        try {
            //Class.forName("com.mysql.cj.jdbc.Driver").newInstance();  jdbc 高版本
            Class.forName("com.mysql.jdbc.Driver").newInstance();
            
            
在avro 中添加 binlog mate 信息            
            
